1. 
npm install @ngx-translate/core --save
npm install @ngx-translate/http-loader --save

2. 
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { TranslateLoader, TranslateModule } from '@ngx-translate/core';

export function httpLoaderFactory(httpClient: HttpClient): TranslateHttpLoader {
  return new TranslateHttpLoader(httpClient, './assets/translations/', '.json');
}

imports: [    
      TranslateModule.forRoot({
        loader: {
           provide: TranslateLoader,
           useFactory: httpLoaderFactory,
           deps: [HttpClient]
        }
     })
   ]

Note:
If you use a SharedModule that you import in multiple other feature modules, 
you can export the TranslateModule to make sure you don't have to import it in every module.

3.
import { TranslateModule } from '@ngx-translate/core';
TranslateModule.forChild()

4.
import { TranslateService } from '@ngx-translate/core';

constructor(private readonly translateService: TranslateService) {
    this.translateService.setDefaultLang('en');
    this.translateService.use('en');
  }

5.
{{ 'demo.frame.footer' | translate }}

--------> demo footer

6.
restliche labels im frame (html + ts) ersetzen

7. 
constructor(private readonly router: Router,
            private readonly translateService: TranslateService) {
}

this.selectedLanguage = this.availableLanguages.find(lang => this.translateService.currentLang === lang.languageCode);

this.translateService.use(item.languageCode);

--------> demo switch language

export function httpLoaderFactory(httpClient: HttpClient): TranslateLoader {
  return new MyTranslateHttpLoader(httpClient);
}

export class MyTranslateHttpLoader implements TranslateLoader {

  constructor(private readonly httpClient: HttpClient) { }

  getTranslation(lang: string): Observable<any> {
      return this.httpClient.get('http://localhost.de/api/translation/' + lang);
  }
}

--------> demo still working
